/**
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProductCouponResponse from '../model/CreateProductCouponResponse';
import DeleteProductCouponResponse from '../model/DeleteProductCouponResponse';
import Error from '../model/Error';
import GetProductCouponResponse from '../model/GetProductCouponResponse';
import NewProductCouponPayload from '../model/NewProductCouponPayload';
import ProductPurchaseFilter from '../model/ProductPurchaseFilter';
import UpdateProductCouponPayload from '../model/UpdateProductCouponPayload';
import UpdateProductCouponResponse from '../model/UpdateProductCouponResponse';

/**
* ProductCoupons service.
* @module Everyday/GmodStore/Sdk/api/ProductCouponsApi
* @version 3.1.0
*/
export default class ProductCouponsApi {

    /**
    * Constructs a new ProductCouponsApi. 
    * @alias module:Everyday/GmodStore/Sdk/api/ProductCouponsApi
    * @class
    * @param {module:Everyday/GmodStore/Sdk/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Everyday/GmodStore/Sdk/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProductCoupon operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~createProductCouponCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/CreateProductCouponResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a coupon for a product
     * @param {String} product 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/NewProductCouponPayload} opts.newProductCouponPayload 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~createProductCouponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/CreateProductCouponResponse}
     */
    createProductCoupon(product, opts, callback) {
      opts = opts || {};
      let postBody = opts['newProductCouponPayload'];
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling createProductCoupon");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProductCouponResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductCoupon operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~deleteProductCouponCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/DeleteProductCouponResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified coupon for a product
     * @param {String} product 
     * @param {String} coupon 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~deleteProductCouponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/DeleteProductCouponResponse}
     */
    deleteProductCoupon(product, coupon, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling deleteProductCoupon");
      }
      // verify the required parameter 'coupon' is set
      if (coupon === undefined || coupon === null) {
        throw new Error("Missing the required parameter 'coupon' when calling deleteProductCoupon");
      }

      let pathParams = {
        'product': product,
        'coupon': coupon
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteProductCouponResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/coupons/{coupon}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductCoupon operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~getProductCouponCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/GetProductCouponResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the specified coupon for a product
     * @param {String} product 
     * @param {String} coupon 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/ProductPurchaseFilter} opts.filter Filter the results
     * @param {module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~getProductCouponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/GetProductCouponResponse}
     */
    getProductCoupon(product, coupon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling getProductCoupon");
      }
      // verify the required parameter 'coupon' is set
      if (coupon === undefined || coupon === null) {
        throw new Error("Missing the required parameter 'coupon' when calling getProductCoupon");
      }

      let pathParams = {
        'product': product,
        'coupon': coupon
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductCouponResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/coupons/{coupon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductCoupons operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~listProductCouponsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all coupons for a product
     * @param {String} product 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage  (default to 24)
     * @param {String} opts.cursor The cursor from which to return paginated results starting after
     * @param {module:Everyday/GmodStore/Sdk/model/ProductPurchaseFilter} opts.filter Filter the results
     * @param {module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~listProductCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listProductCoupons(product, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling listProductCoupons");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'cursor': opts['cursor'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductCoupon operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~updateProductCouponCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/UpdateProductCouponResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified coupon for a product
     * @param {String} product 
     * @param {String} coupon 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/UpdateProductCouponPayload} opts.updateProductCouponPayload 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductCouponsApi~updateProductCouponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/UpdateProductCouponResponse}
     */
    updateProductCoupon(product, coupon, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateProductCouponPayload'];
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling updateProductCoupon");
      }
      // verify the required parameter 'coupon' is set
      if (coupon === undefined || coupon === null) {
        throw new Error("Missing the required parameter 'coupon' when calling updateProductCoupon");
      }

      let pathParams = {
        'product': product,
        'coupon': coupon
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProductCouponResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/coupons/{coupon}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
