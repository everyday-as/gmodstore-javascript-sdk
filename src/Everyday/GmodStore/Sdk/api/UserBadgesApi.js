/**
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserBadgeResponse from '../model/CreateUserBadgeResponse';
import DeleteUserBadgeResponse from '../model/DeleteUserBadgeResponse';
import Error from '../model/Error';
import NewUserBadgePayload from '../model/NewUserBadgePayload';

/**
* UserBadges service.
* @module Everyday/GmodStore/Sdk/api/UserBadgesApi
* @version 3.0.0
*/
export default class UserBadgesApi {

    /**
    * Constructs a new UserBadgesApi. 
    * @alias module:Everyday/GmodStore/Sdk/api/UserBadgesApi
    * @class
    * @param {module:Everyday/GmodStore/Sdk/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Everyday/GmodStore/Sdk/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUserBadge operation.
     * @callback module:Everyday/GmodStore/Sdk/api/UserBadgesApi~createUserBadgeCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/CreateUserBadgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a badge to a user
     * @param {String} user 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload} opts.newUserBadgePayload 
     * @param {module:Everyday/GmodStore/Sdk/api/UserBadgesApi~createUserBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/CreateUserBadgeResponse}
     */
    createUserBadge(user, opts, callback) {
      opts = opts || {};
      let postBody = opts['newUserBadgePayload'];
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUserBadge");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserBadgeResponse;
      return this.apiClient.callApi(
        '/api/v3/users/{user}/badges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserBadge operation.
     * @callback module:Everyday/GmodStore/Sdk/api/UserBadgesApi~deleteUserBadgeCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/DeleteUserBadgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detach a badge from a user
     * @param {String} user 
     * @param {String} badge 
     * @param {module:Everyday/GmodStore/Sdk/api/UserBadgesApi~deleteUserBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/DeleteUserBadgeResponse}
     */
    deleteUserBadge(user, badge, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteUserBadge");
      }
      // verify the required parameter 'badge' is set
      if (badge === undefined || badge === null) {
        throw new Error("Missing the required parameter 'badge' when calling deleteUserBadge");
      }

      let pathParams = {
        'user': user,
        'badge': badge
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUserBadgeResponse;
      return this.apiClient.callApi(
        '/api/v3/users/{user}/badges/{badge}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserBadges operation.
     * @callback module:Everyday/GmodStore/Sdk/api/UserBadgesApi~listUserBadgesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the specified user's badges
     * @param {String} user 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage  (default to 24)
     * @param {String} opts.cursor The cursor from which to return paginated results starting after
     * @param {module:Everyday/GmodStore/Sdk/api/UserBadgesApi~listUserBadgesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listUserBadges(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listUserBadges");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v3/users/{user}/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
