/**
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewUserBadgePayload model module.
 * @module Everyday/GmodStore/Sdk/model/NewUserBadgePayload
 * @version 3.0.0
 */
class NewUserBadgePayload {
    /**
     * Constructs a new <code>NewUserBadgePayload</code>.
     * @alias module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload
     * @param badgeId {module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload.BadgeIdEnum} 
     */
    constructor(badgeId) { 
        
        NewUserBadgePayload.initialize(this, badgeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, badgeId) { 
        obj['badge_id'] = badgeId;
    }

    /**
     * Constructs a <code>NewUserBadgePayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload} obj Optional instance to populate.
     * @return {module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload} The populated <code>NewUserBadgePayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewUserBadgePayload();

            if (data.hasOwnProperty('badge_id')) {
                obj['badge_id'] = ApiClient.convertToType(data['badge_id'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:Everyday/GmodStore/Sdk/model/NewUserBadgePayload.BadgeIdEnum} badge_id
 */
NewUserBadgePayload.prototype['badge_id'] = undefined;





/**
 * Allowed values for the <code>badge_id</code> property.
 * @enum {String}
 * @readonly
 */
NewUserBadgePayload['BadgeIdEnum'] = {

    /**
     * value: "2fa"
     * @const
     */
    "2fa": "2fa",

    /**
     * value: "addon-submit"
     * @const
     */
    "addon-submit": "addon-submit",

    /**
     * value: "forum-post"
     * @const
     */
    "forum-post": "forum-post",

    /**
     * value: "beta"
     * @const
     */
    "beta": "beta",

    /**
     * value: "first-purchase"
     * @const
     */
    "first-purchase": "first-purchase",

    /**
     * value: "received-message"
     * @const
     */
    "received-message": "received-message",

    /**
     * value: "coal"
     * @const
     */
    "coal": "coal",

    /**
     * value: "contribution"
     * @const
     */
    "contribution": "contribution",

    /**
     * value: "developer"
     * @const
     */
    "developer": "developer",

    /**
     * value: "discord-booster"
     * @const
     */
    "discord-booster": "discord-booster",

    /**
     * value: "download"
     * @const
     */
    "download": "download",

    /**
     * value: "job"
     * @const
     */
    "job": "job",

    /**
     * value: "featured"
     * @const
     */
    "featured": "featured",

    /**
     * value: "sponsor"
     * @const
     */
    "sponsor": "sponsor",

    /**
     * value: "kawaii"
     * @const
     */
    "kawaii": "kawaii",

    /**
     * value: "crown"
     * @const
     */
    "crown": "crown",

    /**
     * value: "favourites"
     * @const
     */
    "favourites": "favourites",

    /**
     * value: "shiba"
     * @const
     */
    "shiba": "shiba",

    /**
     * value: "negotiated"
     * @const
     */
    "negotiated": "negotiated",

    /**
     * value: "pug"
     * @const
     */
    "pug": "pug",

    /**
     * value: "ex-staff"
     * @const
     */
    "ex-staff": "ex-staff",

    /**
     * value: "aspiring"
     * @const
     */
    "aspiring": "aspiring",

    /**
     * value: "staff"
     * @const
     */
    "staff": "staff",

    /**
     * value: "push"
     * @const
     */
    "push": "push",

    /**
     * value: "bought"
     * @const
     */
    "bought": "bought"
};



export default NewUserBadgePayload;

