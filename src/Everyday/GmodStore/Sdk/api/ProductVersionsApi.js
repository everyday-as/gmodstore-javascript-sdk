/**
 * gmodstore
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProductVersionResponse from '../model/CreateProductVersionResponse';
import DeleteProductVersionResponse from '../model/DeleteProductVersionResponse';
import DownloadProductVersionResponse from '../model/DownloadProductVersionResponse';
import Error from '../model/Error';
import GetProductVersionResponse from '../model/GetProductVersionResponse';
import ProductVersionFilter from '../model/ProductVersionFilter';
import UpdateProductVersionPayload from '../model/UpdateProductVersionPayload';
import UpdateProductVersionResponse from '../model/UpdateProductVersionResponse';

/**
* ProductVersions service.
* @module Everyday/GmodStore/Sdk/api/ProductVersionsApi
* @version 3.1.0
*/
export default class ProductVersionsApi {

    /**
    * Constructs a new ProductVersionsApi. 
    * @alias module:Everyday/GmodStore/Sdk/api/ProductVersionsApi
    * @class
    * @param {module:Everyday/GmodStore/Sdk/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Everyday/GmodStore/Sdk/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProductVersion operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~createProductVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/CreateProductVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a version for a product
     * @param {String} product 
     * @param {String} name 
     * @param {String} changelog 
     * @param {File} file 
     * @param {module:Everyday/GmodStore/Sdk/model/String} releaseType 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~createProductVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/CreateProductVersionResponse}
     */
    createProductVersion(product, name, changelog, file, releaseType, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling createProductVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createProductVersion");
      }
      // verify the required parameter 'changelog' is set
      if (changelog === undefined || changelog === null) {
        throw new Error("Missing the required parameter 'changelog' when calling createProductVersion");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createProductVersion");
      }
      // verify the required parameter 'releaseType' is set
      if (releaseType === undefined || releaseType === null) {
        throw new Error("Missing the required parameter 'releaseType' when calling createProductVersion");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'changelog': changelog,
        'file': file,
        'releaseType': releaseType
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateProductVersionResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProductVersion operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~deleteProductVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/DeleteProductVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified version for a product
     * @param {String} product 
     * @param {String} version 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~deleteProductVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/DeleteProductVersionResponse}
     */
    deleteProductVersion(product, version, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling deleteProductVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteProductVersion");
      }

      let pathParams = {
        'product': product,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteProductVersionResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductDownloadToken operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~getProductDownloadTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/DownloadProductVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a one time use url for downloading a product
     * @param {String} product 
     * @param {String} version 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~getProductDownloadTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/DownloadProductVersionResponse}
     */
    getProductDownloadToken(product, version, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling getProductDownloadToken");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getProductDownloadToken");
      }

      let pathParams = {
        'product': product,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadProductVersionResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions/{version}/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductVersion operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~getProductVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/GetProductVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the specified version for a product
     * @param {String} product 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/ProductVersionFilter} opts.filter Filter the results
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~getProductVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/GetProductVersionResponse}
     */
    getProductVersion(product, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling getProductVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getProductVersion");
      }

      let pathParams = {
        'product': product,
        'version': version
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductVersionResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductVersions operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~listProductVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all versions for a product
     * @param {String} product 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage  (default to 24)
     * @param {String} opts.cursor The cursor from which to return paginated results starting after
     * @param {module:Everyday/GmodStore/Sdk/model/ProductVersionFilter} opts.filter Filter the results
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~listProductVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listProductVersions(product, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling listProductVersions");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
        'perPage': opts['perPage'],
        'cursor': opts['cursor'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductVersion operation.
     * @callback module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~updateProductVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:Everyday/GmodStore/Sdk/model/UpdateProductVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified version for a product
     * @param {String} product 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:Everyday/GmodStore/Sdk/model/UpdateProductVersionPayload} opts.updateProductVersionPayload 
     * @param {module:Everyday/GmodStore/Sdk/api/ProductVersionsApi~updateProductVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Everyday/GmodStore/Sdk/model/UpdateProductVersionResponse}
     */
    updateProductVersion(product, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateProductVersionPayload'];
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling updateProductVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateProductVersion");
      }

      let pathParams = {
        'product': product,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['PersonalAccessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProductVersionResponse;
      return this.apiClient.callApi(
        '/api/v3/products/{product}/versions/{version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
